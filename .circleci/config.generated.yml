# This configuration was automatically generated from a CircleCI 1.0 config.
# It should include any build commands you had along with commands that CircleCI
# inferred from your project structure. We strongly recommend you read all the
# comments in this file to understand the structure of CircleCI 2.0, as the idiom
# for configuration has changed substantially in 2.0 to allow arbitrary jobs rather
# than the prescribed lifecycle of 1.0. In general, we recommend using this generated
# configuration as a reference rather than using it in production, though in most
# cases it should duplicate the execution of your original 1.0 config.
version: 2
jobs:
  build:
    working_directory: ~/checklistpartner/checklistpartner
    parallelism: 14
    shell: /bin/bash --login
    # CircleCI 2.0 does not support environment variables that refer to each other the same way as 1.0 did.
    # If any of these refer to each other, rewrite them so that they don't or see https://circleci.com/docs/2.0/env-vars/#interpolating-environment-variables-to-set-other-environment-variables .
    environment:
      CIRCLE_ARTIFACTS: /tmp/circleci-artifacts
      CIRCLE_TEST_REPORTS: /tmp/circleci-test-results
      node_harmony: node --harmony
    # In CircleCI 1.0 we used a pre-configured image with a large number of languages and other packages.
    # In CircleCI 2.0 you can now specify your own image, or use one of our pre-configured images.
    # The following configuration line tells CircleCI to use the specified docker image as the runtime environment for you job.
    # We have selected a pre-built image that mirrors the build environment we use on
    # the 1.0 platform, but we recommend you choose an image more tailored to the needs
    # of each job. For more information on choosing an image (or alternatively using a
    # VM instead of a container) see https://circleci.com/docs/2.0/executor-types/
    # To see the list of pre-built images that CircleCI provides for most common languages see
    # https://circleci.com/docs/2.0/circleci-images/
    docker:
    - image: circleci/build-image:ubuntu-14.04-XXL-upstart-1189-5614f37
      command: /sbin/init
    steps:
    # Machine Setup
    #   If you break your build into multiple jobs with workflows, you will probably want to do the parts of this that are relevant in each
    # The following `checkout` command checks out your code to your working directory. In 1.0 we did this implicitly. In 2.0 you can choose where in the course of a job your code should be checked out.
    - checkout
    # Prepare for artifact and test results  collection equivalent to how it was done on 1.0.
    # In many cases you can simplify this from what is generated here.
    # 'See docs on artifact collection here https://circleci.com/docs/2.0/artifacts/'
    - run: mkdir -p $CIRCLE_ARTIFACTS $CIRCLE_TEST_REPORTS
    # This is based on your 1.0 configuration file or project settings
    - run:
        working_directory: ~/checklistpartner/checklistpartner
        command: curl https://raw.githubusercontent.com/creationix/nvm/v0.33.1/install.sh | bash
    - run:
        working_directory: ~/checklistpartner/checklistpartner
        command: curl -s https://raw.githubusercontent.com/chronogolf/circleci-google-chrome/master/use_chrome_stable_version.sh | bash
    # This is based on your 1.0 configuration file or project settings
    - run:
        working_directory: ~/checklistpartner/checklistpartner
        command: nvm install 8.5.0 && nvm alias default 8.5.0
    - run:
        working_directory: ~/checklistpartner/checklistpartner
        command: 'sudo redis-cli ping >/dev/null 2>&1 || sudo service redis-server
          start; '
    # Dependencies
    #   This would typically go in either a build or a build-and-test job when using workflows
    # Restore the dependency cache
    - restore_cache:
        keys:
        # This branch if available
        - v1-dep-{{ .Branch }}-
        # Default branch if not
        - v1-dep-master-
        # Any branch if there are none on the default branch - this should be unnecessary if you have your default branch configured correctly
        - v1-dep-
    # This is based on your 1.0 configuration file or project settings
    - run: npm install -g npm@4.3.0
    # This is based on your 1.0 configuration file or project settings
    - run: npm install
    - run: cd services; npm install
    - run: cd client;   npm install
    - run: cd client;   node_modules/.bin/bower install
    - run: cd services/test/api; npm install
    - run: cd client/src/test/unit; npm install
    - run: cd client/src/test/ui; npm install
    - run: cd tools; npm install
    # Save dependency cache
    - save_cache:
        key: v1-dep-{{ .Branch }}-{{ epoch }}
        paths:
        # This is a broad list of cache paths to include many possible development environments
        # You can probably delete some of these entries
        - vendor/bundle
        - ~/virtualenvs
        - ~/.m2
        - ~/.ivy2
        - ~/.bundle
        - ~/.go_workspace
        - ~/.gradle
        - ~/.cache/bower
        # These cache paths were specified in the 1.0 config
        - node_modules
        - services/node_modules
        - client/node_modules
        - client/bower_components
        - services/test/api/node_modules
        - client/src/test/unit/node_modules
        - client/src/test/ui/node_modules
        - ./node_modules
    # Test
    #   This would typically be a build job when using workflows, possibly combined with build
    # This is based on your 1.0 configuration file or project settings
    - run: cd services; node_modules/.bin/gulp node-symlink
    - run: cd services/test/unit;  npm install
    - run: cd isomorph/test; npm install
    # This is based on your 1.0 configuration file or project settings
    - run:
        name: cd services; node_modules/.bin/gulp build
        command: if [ "$CIRCLE_NODE_INDEX" == "0" ]; then cd services; node_modules/.bin/gulp build; fi
    - run:
        name: cd services/test/unit; $node_harmony runUnitTests.js
        command: if [ "$CIRCLE_NODE_INDEX" == "0" ]; then cd services/test/unit; $node_harmony runUnitTests.js; fi
    - run:
        name: cd services/test/api; $node_harmony loadSpecQueueServerCircleCi.js
        command: if [ "$CIRCLE_NODE_INDEX" == "0" ]; then cd services/test/api; $node_harmony loadSpecQueueServerCircleCi.js; fi
    - run:
        command: cd services/test/api; $node_harmony runApiTestsCircleCi.js
        # max-runtime is not supported.  The 1.0 config had a max-runtime value of 144000.
    - run: cd client; $node_harmony runClientBuildCircleCi.js
    - run:
        name: cd client/src/test/unit; ./runUnitTests.sh
        command: if [ "$CIRCLE_NODE_INDEX" == "0" ]; then cd client/src/test/unit; ./runUnitTests.sh; fi
    - run:
        name: cd client/src/test/ui/components; node runComponentTests.js
        command: if [ "$CIRCLE_NODE_INDEX" == "0" ]; then cd client/src/test/ui/components; node runComponentTests.js; fi
    - run:
        name: cd client/src/test/ui/e2e; $node_harmony loadE2eTestsQueueServer.js
        command: if [ "$CIRCLE_NODE_INDEX" == "0" ]; then cd client/src/test/ui/e2e; $node_harmony loadE2eTestsQueueServer.js; fi
    - run: cd client/src/test/ui/e2e; node pushToTestApps.js
    - run: cd client/src/test/ui/e2e; node runE2eTestsCircleCI.js
    # Teardown
    #   If you break your build into multiple jobs with workflows, you will probably want to do the parts of this that are relevant in each
    # Save test results
    - store_test_results:
        path: /tmp/circleci-test-results
    # Save artifacts
    - store_artifacts:
        path: /tmp/circleci-artifacts
    - store_artifacts:
        path: /tmp/circleci-test-results
